  // src/utils/fetchSiteData.ts
  import axios from 'axios';
  import redis from "@/lib/redis";
  import { getSpinText } from "../services/spinTextService";
  import { extractLocale } from "@/utils/localeUtils";

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
  interface SiteData {
    siteDomain: string;
    localeLang?: string;
    attributes: any;
    [key: string]: any;
  }

  interface FetchedSiteData extends SiteData {
    locale: string;
    attributes: {
      buttonText: string;
      footerSocialText: string;
      topPromotionsTitle: string;
      topWinnersTitle: string;
      listOfGames: {
        pretitle: string;
        title: string;
      };
      mostLuckyPlayers: {
        pretitle: string;
        title: string;
      };
      topGames: {
        pretitle: string;
        title: string;
      };
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
      [key: string]: any;
    };
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–∞
  function normalizeDomain(domain: string): string {
    return domain.replace(/^https?:\/\//, '').split(':')[0];
  }

  async function fetchSiteData(host: string): Promise<FetchedSiteData | null> {
    try {
      const cleanHost = normalizeDomain(host);
      const cacheKey = `siteData:${cleanHost}`;
  
      // üî• 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –≤ Redis
      const cachedData = await redis.get(cacheKey);
      if (cachedData) {
        console.log(`‚ö° –î–∞–Ω–Ω—ã–µ –¥–ª—è ${cleanHost} –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Redis`);
        return JSON.parse(cachedData);
      }
  
      console.log(`üîç –ó–∞–ø—Ä–æ—Å –∫ Strapi –¥–ª—è ${cleanHost}`);
  
      // 2. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É Strapi
      const response = await axios.get("https://cmsbase24.top/api/all-sites?populate=*");
      const allSites: SiteData[] = response.data?.data;
  
      if (!Array.isArray(allSites)) {
        console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç Strapi:", allSites);
        return null;
      }
  
      const siteData = allSites.find((site) => normalizeDomain(site.siteDomain) === cleanHost);
  
      if (!siteData) {
        console.warn("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å–∞–π—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–æ–º–µ–Ω–∞:", cleanHost);
        return null;
      }
  
      const localeLang = siteData.localeLang || "en-US";
      const locale = extractLocale(localeLang);
  
      // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –≤ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
      const localizedTexts = {
        buttonText: getSpinText("button_text", localeLang),
        footerSocialText: getSpinText("footer_our_social_networks", localeLang),
        topPromotionsTitle: getSpinText("top_promotions", localeLang),
        topWinnersTitle: getSpinText("top_winners_of_the_day", localeLang),
        listOfGames: {
          pretitle: getSpinText("list_of_games.pretitle", localeLang),
          title: getSpinText("list_of_games.title", localeLang),
        },
        mostLuckyPlayers: {
          pretitle: getSpinText("most_lucky_players.pretitle", localeLang),
          title: getSpinText("most_lucky_players.title", localeLang),
        },
        topGames: {
          pretitle: getSpinText("top_games.pretitle", localeLang),
          title: getSpinText("top_games.title", localeLang),
        },
      };
  
      const finalData = {
        ...siteData,
        locale,
        attributes: {
          ...siteData.attributes,
          ...localizedTexts,
        },
      };
  
      // üî• 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Redis –Ω–∞ 10 –º–∏–Ω—É—Ç (600 —Å–µ–∫—É–Ω–¥)
      await redis.set(cacheKey, JSON.stringify(finalData), "EX", 600);
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è ${cleanHost} –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã –≤ Redis`);
  
      return finalData;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö:", error);
      return null;
    }
  }
  
  export default fetchSiteData;
