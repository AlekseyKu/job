import { NextResponse } from "next/server";
import fetchSiteData from "@/utils/fetchSiteData";

const cache = new Map(); // –õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –≤ –ø–∞–º—è—Ç–∏ (–¥–æ–º–µ–Ω -> targetLink)
const CACHE_TTL = 10 * 60 * 1000; // –ö—ç—à –∂–∏–≤—ë—Ç 10 –º–∏–Ω—É—Ç

export async function middleware(req) {
  if (req.nextUrl.pathname === "/go") {
    const host = req.headers.get("host"); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const now = Date.now();
    console.log(`üåê –ó–∞–ø—Ä–æ—Å —Å –¥–æ–º–µ–Ω–∞: ${host}`);

    // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—ç—à
    if (cache.has(host)) {
      const cachedData = cache.get(host);
      
      // –ï—Å–ª–∏ –∫—ç—à —Å–≤–µ–∂–∏–π, —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
      if (now - cachedData.timestamp < CACHE_TTL) {
        // console.log(`‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è ${host}: ${cachedData.targetLink}`);
        return NextResponse.redirect(cachedData.targetLink);
      } else {
        // console.log(`üîÑ –ö—ç—à –¥–ª—è ${host} —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π targetLink...`);
        cache.delete(host); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à
      }
    }

    try {
      // 2Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Strapi
      const siteData = await fetchSiteData(host);
    //   console.log("üîç –î–∞–Ω–Ω—ã–µ –∏–∑ fetchSiteData:", JSON.stringify(siteData.targetLink, null, 2));

      if (siteData && siteData.targetLink) {
        // console.log(`‚úÖ –ù–∞–π–¥–µ–Ω targetLink: ${siteData.targetLink}`);

        // 3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        cache.set(host, { targetLink: siteData.targetLink, timestamp: now });

        return NextResponse.redirect(siteData.targetLink);
      } else {
        console.warn("‚ö†Ô∏è targetLink not found in Strapi data!");
      }
    } catch (error) {
      console.error("‚ùå Error in middleware:", error);
    }

    return NextResponse.next(); // –ï—Å–ª–∏ –Ω–µ—Ç targetLink, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é —Ä–∞–±–æ—Ç—É
  }

  return NextResponse.next(); // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
}
